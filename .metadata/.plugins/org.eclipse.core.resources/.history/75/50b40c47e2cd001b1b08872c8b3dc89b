package xyz.elandasunshine.capi.registry;

import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map.Entry;

import org.apache.commons.lang3.tuple.Pair;
import com.google.common.collect.Lists;
import net.minecraft.util.ResourceLocation;

public final class Registry<T> implements Iterable<Pair<ResourceLocation, T>>
{
	//==================================================================================================================
	public class KeyValuePair extends AbstractMap.SimpleEntry<ResourceLocation, T>
	{
		public KeyValuePair(Entry<? extends ResourceLocation, ? extends T> entry) { super(entry); }
	}
	
	private class RegistryIterator implements Iterator<KeyValuePair>
	{
		Registry<T> registry;
		int index;
		
		//==============================================================================================================
		public RegistryIterator(Registry<T> parRegistry) { registry = parRegistry; }
		
		//==============================================================================================================
		@Override
		public boolean hasNext()
		{
			return index < (registry.size() - 1);
		}

		@Override
		public KeyValuePair next()
		{
			return registry.getEntryAt(index++);
		}
		
	}
	
	//==================================================================================================================
	private ArrayList<KeyValuePair> elements;
	
	//==================================================================================================================
	public Registry()             { elements = Lists.newArrayList(); }
	public Registry(int capacity) { elements = Lists.newArrayListWithCapacity(capacity); }
	
	@SafeVarargs
	public Registry(KeyValuePair ...parElements)
	{
		elements = Lists.newArrayList(parElements);
	}
	
	//==================================================================================================================
	public boolean register(ResourceLocation id, T element)
	{		
		elements.add(Pair.of(id, element));
		
		return true;
	}
	
	//==================================================================================================================
	public T                getElementAt(int index) { return elements.get(index).getValue(); }
	public ResourceLocation getIdAt     (int index) { return elements.get(index).getKey(); }
	public KeyValuePair     getEntryAt  (int index) { return elements.get(index); }
	
	public T get(ResourceLocation id)
	{
		for (final KeyValuePair entry : elements)
		{
			if (entry.getKey().equals(id))
			{
				return entry.getValue();
			}
		}
		
		return null;
	}
	
	public ResourceLocation get(T element)
	{
		for (final KeyValuePair entry : elements)
		{
			if (entry.getValue().equals(element))
			{
				return entry.getKey();
			}
		}
		
		return null;
	}
	
	//==================================================================================================================
	public int size() { return elements.size(); }
	
	//==================================================================================================================
	public int indexOf(ResourceLocation id)
	{
		for (int i = 0; i < elements.size(); ++i)
		{			
			if (elements.get(i).getKey().equals(id))
			{
				return i;
			}
		}
		
		return -1;
	}
	
	public int indexOf(T element)
	{
		for (int i = 0; i < elements.size(); ++i)
		{			
			if (elements.get(i).getValue().equals(element))
			{
				return i;
			}
		}
		
		return -1;
	}
	
	//==================================================================================================================
	public boolean contains(ResourceLocation id) { return indexOf(id) >= 0;  }
	public boolean contains(T element)           { return elements.contains(element); }
	
	//==================================================================================================================
	public boolean isEmpty() { return elements.isEmpty(); }
	
	//==================================================================================================================
	@Override
	public Iterator<Pair<ResourceLocation, T>> iterator()
	{
		return new RegistryIterator(this);
	}
}
